name: Go Release Build
on:
  create:
    branches:
      - 'release/**'
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -a -ldflags="-w -s" -o zc-${{ matrix.goos }}-${{ matrix.goarch }}
      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: zc-${{ matrix.goos }}-${{ matrix.goarch }}
          path: zc-${{ matrix.goos }}-${{ matrix.goarch }}
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Download Linux amd64 Binaries
        uses: actions/download-artifact@v6
        with:
          name: zc-linux-amd64
          path: ./artifacts
      - name: Download Linux arm64 Binaries
        uses: actions/download-artifact@v6
        with:
          name: zc-linux-arm64
          path: ./artifacts
      - name: Download Windows amd64 Binaries
        uses: actions/download-artifact@v6
        with:
          name: zc-windows-amd64
          path: ./artifacts
      - name: Download Windows arm64 Binaries
        uses: actions/download-artifact@v6
        with:
          name: zc-windows-arm64
          path: ./artifacts
      - name: Download Darwin amd64 Binaries
        uses: actions/download-artifact@v6
        with:
          name: zc-darwin-amd64
          path: ./artifacts
      - name: Download Darwin arm64 Binaries
        uses: actions/download-artifact@v6
        with:
          name: zc-darwin-arm64
          path: ./artifacts
      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          echo "## Release Notes" > notes.md
          echo "" >> notes.md
          echo "### Features" >> notes.md
          git log --oneline --decorate=short --grep="feat:" >> notes.md
          echo "" >> notes.md
          echo "### Bug Fixes" >> notes.md
          git log --oneline --decorate=short --grep="fix:" >> notes.md
          echo "" >> notes.md
          echo "### Improvements" >> notes.md
          git log --oneline --decorate=short --grep="chore:" --grep="refactor:" --grep="perf:" >> notes.md
          echo "" >> notes.md
          echo "::set-output name=notes::$(cat notes.md)"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./artifacts/zc-*  # Match all downloaded artifacts in the directory
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.generate_release_notes.outputs.notes }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          preserve_order: true
          make_latest: true